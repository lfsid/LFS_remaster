#!/bin/bash


if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 
	exit 1
fi

. script/grub-osprober
. script/download
. script/embeded
. script/buildiso
. script/remaster
. script/function
. script/ceck-depend


KERNEL_MODULES="$(uname -r)"

PWDN=$(pwd)

readonly COMMAND="$0"
readonly SETUP_ARCH="`uname -m`"
readonly VERSION="1.0"







############################################################################################################################################
#########   LIVECD BUILDER /  ##############################################################################################################
######### remastering funtion ##############################################################################################################
############################################################################################################################################

# on development
build_initrd(){
     download_function
                          main_tools
                          
                          if [ "$EMBEDED_INITRD" == "y" ]; then
	                        echo "    -- enabled embeded initrd"
                                embeded_tools
                          else
	                        echo "    -- embeded initrd not enabled"
                          fi
                          init_created
}


build_live(){



	
        greating_remaster
	build_dir
	copying_baseiso
	copying_root
        copying_system
        squashing_
        copying_squashfs
        deploy_sys_iso_linux



}




############################################################################################################################################
#########    END OF LIVECD BUILDER /   #####################################################################################################
#########     remastering funtion      #####################################################################################################
############################################################################################################################################




##################################
########## INITRD BUILD ##########
##################################






main_tools(){





#### find and add if not exist   SRC_PKG_DIR


####################################

 
rm -rf /$WORK_DIR/*  >/dev/null 2>/dev/null

rm -rf $TGT_TMP_INITRD >/dev/null 2>/dev/null
mkdir $TGT_TMP_INITRD >/dev/null 2>/dev/null
mkdir $WORK_DIR >/dev/null 2>/dev/null

  cd $TGT_TMP_INITRD
echo "// creating root file system in newinit"
  mkdir bin boot dev proc sys run var usr opt etc lib >/dev/null 2>/dev/null
  cd /
  mkdir -pv $TGT_TMP_INITRD/{pkg,bin,boot,etc/{opt,sysconfig},home,lib/firmware,lib/modules,mnt,opt} >/dev/null 2>/dev/null
  mkdir -pv $TGT_TMP_INITRD/{media/{floppy,cdrom},srv,var} >/dev/null 2>/dev/null
  install -dv -m 0750 $TGT_TMP_INITRD/root >/dev/null 2>/dev/null
  install -dv -m 1777 $TGT_TMP_INITRD/tmp $TGT_TMP_INITRD/var/tmp >/dev/null 2>/dev/null
  mkdir -vp $TGT_TMP_INITRD/usr/{,local/}{bin,include,lib,sbin,src} >/dev/null 2>/dev/null
  mkdir -vp $TGT_TMP_INITRD/usr/{bin,include,lib,sbin,src} >/dev/null 2>/dev/null
  # mkdir -vp $TGT_TMP_INITRD/usr/{,local/}share/{color,dict,doc,info,locale,man} >/dev/null 2>/dev/null
  # mkdir -v  $TGT_TMP_INITRD/usr/{,local/}share/{misc,terminfo,zoneinfo} >/dev/null 2>/dev/null
  mkdir -vp  $TGT_TMP_INITRD/usr/libexec >/dev/null 2>/dev/null
  # mkdir -vp $TGT_TMP_INITRD/usr/{,local/}share/man/man{1..8} >/dev/null 2>/dev/null

cd $TGT_TMP_INITRD
ln -svnf bin sbin  >/dev/null 2>/dev/null
# if 
echo "// detecting OS arch " 

if [ "$(uname -m)" != 'x86_64' ]; then
        echo "not 64 bit"
else
  echo "    -- 64 bit OS "
   cd $TGT_TMP_INITRD
   mkdir lib64 >/dev/null 2>/dev/null
   cp -pR /lib64/ld* $TGT_TMP_INITRD/lib64 >/dev/null 2>/dev/null
fi 

  mkdir -v $TGT_TMP_INITRD/var/{log,mail,spool}  >/dev/null 2>/dev/null
  ln -sv /run var/run >/dev/null 2>/dev/null
  ln -sv /run/lock var/lock >/dev/null 2>/dev/null
  mkdir -pv $TGT_TMP_INITRD/var/{opt,cache,lib/{color,misc,locate},local} >/dev/null 2>/dev/null


#####
# list lib wiil be to copy 
#####

	#echo "// copying some lib from system"

 	cp  -pR  /lib/libreadline* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp  -pR /lib/libhistory* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
	 # cp -pR  /lib/libncurses* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp  -pR  /lib/libdl* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp  -pR  /lib/libc* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp  -pR /lib64/ld* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	# cp  -pR /lib/libmount* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	# cp  -pR /lib/libblkid* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	# cp  -pR /lib/libuuid* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp  -pR /lib/librt* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/libpthread* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/libm* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
        cp -pR  /lib/libt* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/libz* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/liblzma* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/libacl* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
	cp -pR  /lib/libattr* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/libsmart* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	# cp  /lib/libext2fs* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	p -pR  /lib/libcom_err* $TGT_TMP_INITRD/lib  >/dev/null 2>/dev/null
 	# cp  /lib/libe2p* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/libcap* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	# cp  /lib/libfdisk* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /lib/libntfs* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /usr/lib/libcurl* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR /usr/lib/libstdc*.so* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
 	cp -pR  /usr/lib/libgcc* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null

#####
#####
#####



LIB_LIST="libmpfr libreadline libhistory librt ibdl libc ld libcom_err libe2p libpthread libm  libz liblzma libacl libattr libsmart libt libcap libntfs  libgcc libstdc libcurl libgmp"





echo_green_star
echo -ne "copying some liblary from system   >" | tr -s "/" >&2
for fileslib in $LIB_LIST
do
      echo -ne ">" >&2
sleep 0.1

 if [ -e "/lib/$fileslib" ]; then
        cp -pRv /lib/$fileslib* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null

elif [ -e "/lib64/$fileslib" ]; then
        cp -pRv /lib64/$fileslib* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null

elif [ -e "/usr/lib/$fileslib" ]; then
        cp -pRv /usr/lib/$fileslib* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null

elif [ -e "/usr/lib64/$fileslib" ]; then
        cp -pRv /usr/lib64/$fileslib* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null


else 
    echo "$fileslib File does not exist"  >/dev/null 2>/dev/null
fi 
done





 	cp -pR /lib/udev/* $TGT_TMP_INITRD/lib/udev >/dev/null 2>/dev/null

echo ""


filesystemd="/lib/systemd/systemd"
if [ ! -f "$filesystemd" ]
then
    echo "    -- Systemd lib no "
    
else
    echo "    -- Systemd lib yes"

    mkdir $TGT_TMP_INITRD/lib/systemd >/dev/null 2>/dev/null
    cp -pR /lib/systemd/*systemd*.so* $TGT_TMP_INITRD/lib/systemd >/dev/null 2>/dev/null
    cp -pR /lib/systemd/*systemd*.la* $TGT_TMP_INITRD/lib/systemd >/dev/null 2>/dev/null
fi



FILE_LIST="setsid mksquashfs rm cp mke2fs modprobe awk touch ldd lsblk cfdisk egrep mkntfs mkfs wc printf bc "




echo_green_star
echo -ne "copying some binary from system   >" | tr -s "/" >&2
for files in $FILE_LIST
do
      echo -ne ">" >&2
sleep 0.1

 if [ -e "/bin/$files" ]; then
        cp -v /bin/$files* $TGT_TMP_INITRD/bin >/dev/null 2>/dev/null

elif [ -e "/sbin/$files" ]; then
        cp -v /sbin/$files* $TGT_TMP_INITRD/bin >/dev/null 2>/dev/null

elif [ -e "/usr/bin/$files" ]; then
        cp -v /usr/bin/$files* $TGT_TMP_INITRD/bin >/dev/null 2>/dev/null

elif [ -e "/usr/sbin/$files" ]; then
        cp -v /usr/sbin/$files* $TGT_TMP_INITRD/bin >/dev/null 2>/dev/null


else 
    echo "$files File does not exist"  >/dev/null 2>/dev/null
fi 



done
echo ""

######################
######## misc ########
######################

  cp -pR /usr/bin/lynx $TGT_TMP_INITRD/bin >/dev/null 2>/dev/null
  cp -pR $PWDN/custom $TGT_TMP_INITRD/ 2>/dev/null

  cp -pR /usr/bin/nano $TGT_TMP_INITRD/bin >/dev/null 2>/dev/null
  cp -pR /usr/lib/libmagic*  $TGT_TMP_INITRD/usr/lib >/dev/null 2>/dev/null

##########################
######## end misc ########
##########################




cd $TGT_TMP

  echo "// removing uneeded directory and file  "

  rm -vrf $TGT_TMP_INITRD/lib/udev/ >/dev/null 2>/dev/null



  cp  -pR /lib/libpam* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
  cp -pR  /lib/libkmod* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null

  cp -pR /lib/libm* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
  cp -pR /lib/libresolv* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
  cp -pR /lib/liblzma* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null

  cp -pR /lib/ld-* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null
  cp -pR /lib/*udev* $TGT_TMP_INITRD/lib >/dev/null 2>/dev/null


 



 cd  $WORK_DIR
    mkdir -pv  $WORK_DIR   >/dev/null 2>/dev/null
    mkdir -pv $WORK_DIR/installed   >/dev/null 2>/dev/null

  echo "// extracting util linux"
       $TERMINAL_TOOLS  tar -xf $SRC_PKG_DIR/$UTILS_LINUX_FILE 
       cd util*
  echo "// configuring util linux"
       $TERMINAL_TOOLS ./configure ADJTIME_PATH=/var/lib/hwclock/adjtime   \
            --disable-chfn-chsh  \
            --disable-login      \
            --disable-nologin    \
            --disable-su         \
            --disable-setpriv    \
            --disable-runuser    \
            --disable-pylibmount \
            --disable-static     \
            --without-python     \
            --without-systemd    \
            --without-systemdsystemunitdir

  echo "// compiling util linux"
       $TERMINAL_TOOLS make
  echo "// installing util linux "
       $TERMINAL_TOOLS make DESTDIR=$WORK_DIR/installed/util-linux  install 
       cp -pRv $WORK_DIR/installed/util-linux/lib/* $TGT_TMP_INITRD/lib   >/dev/null 2>/dev/null
       cp -pRv $WORK_DIR/installed/util-linux/sbin/cfdisk $TGT_TMP_INITRD/bin   >/dev/null 2>/dev/null
       cp -pRv $WORK_DIR/installed/util-linux/bin/lsblk $TGT_TMP_INITRD/bin  >/dev/null 2>/dev/null

	

  cd  $WORK_DIR


echo "// extracting e2fsprogs"
       $TERMINAL_TOOLS  tar -xf $SRC_PKG_DIR/$EFS_FILE
       cd e2f*
  echo "// configuring e2fsprogs"
       mkdir build 
       cd build 
       $TERMINAL_TOOLS ../configure --prefix=/usr           \
             --bindir=/bin           \
             --with-root-prefix=""   \
             --enable-elf-shlibs     \
             --disable-libblkid      \
             --disable-libuuid       \
             --disable-uuidd         \
             --disable-fsck

  echo "// compiling e2fsprogs"
       $TERMINAL_TOOLS make
  echo "// installing e2fsprogs"
       $TERMINAL_TOOLS make DESTDIR=$WORK_DIR/installed/e2fs  install 
       $TERMINAL_TOOLS make DESTDIR=$WORK_DIR/installed/e2fs  install-libs
       chmod -v u+w $WORK_DIR/installed/e2fs/usr/lib/{libcom_err,libe2p,libext2fs,libss}.a  >/dev/null 2>/dev/null
       
       cp -pRv $WORK_DIR/installed/e2fs/etc/* $TGT_TMP_INITRD/etc  >/dev/null 2>/dev/null
       cp -pRv $WORK_DIR/installed/e2fs/lib/* $TGT_TMP_INITRD/lib  >/dev/null 2>/dev/null
       
       cp -pRv $WORK_DIR/installed/e2fs/usr/lib/* $TGT_TMP_INITRD/usr/lib  >/dev/null 2>/dev/null
       
       cp -pRv $WORK_DIR/installed/e2fs/usr/sbin/* $TGT_TMP_INITRD/bin  >/dev/null 2>/dev/null
       
       cp -pR $WORK_DIR/installed/e2fs/sbin/* $TGT_TMP_INITRD/bin  >/dev/null 2>/dev/null
      


  cd  $WORK_DIR


  echo "// extracting ncurses"
       $TERMINAL_TOOLS  tar -xf $SRC_PKG_DIR/$NCURSES_FILE 
       cd ncurses*
  echo "// configuring ncurses"
       $TERMINAL_TOOLS  sed -i '/LIBTOOL_INSTALL/d' c++/Makefile.in
       $TERMINAL_TOOLS  ./configure --prefix=/          \
                         --mandir=/usr/share/man \
            		 --with-shared           \
            		 --without-debug         \
             		 --without-normal        \
            		 --enable-pc-files       \
             		 --enable-widec

  echo "// compiling ncurses"
       $TERMINAL_TOOLS make
  echo "// installing ncurses"
       $TERMINAL_TOOLS make DESTDIR=$TGT_TMP_INITRD  install 


  cd  $WORK_DIR

  echo "// extracting busybox "
	tar -xf $SRC_PKG_DIR/$BUSYBOX_FILE >/dev/null 2>/dev/null
	cd busybox*


	 $TERMINAL_TOOLS  	make distclean 

  echo "// make a defconfig for busybox "
	 $TERMINAL_TOOLS  	make defconfig  

 # cp $PWDN/busybox.config .config -v  >/dev/null 2>/dev/null


  echo "// tweaking busybox for bash to ash"
              ##################################
                  #CONFIG_BASH_IS_NONE is not set	
        	  #CONFIG_BASH_IS_ASH=y
                  #CONFIG_ASH_BASH_COMPAT=y
                  #CONFIG_HUSH_BASH_COMPAT=y


                  echo "    -- set # CONFIG_BASH_IS_NONE is not set to config "
                  sed '/CONFIG_BASH_IS_NONE/d' -i .config
		  echo "# CONFIG_BASH_IS_NONE is not set" >>.config

                  echo "    -- set CONFIG_BASH_IS_ASH=y to config "
                  sed '/CONFIG_BASH_IS_ASH/d' -i .config
		  echo "CONFIG_BASH_IS_ASH=y" >>.config
                 
                  echo "    -- set CONFIG_BLKID=y config "
                  sed '/CONFIG_BLKID/d' -i .config
		  echo "CONFIG_BLKID=y" >>.config


                  echo "    -- set CONFIG_FEATURE_BLKID_TYPE=y to config "
                  sed '/CONFIG_FEATURE_BLKID_TYPE/d' -i .config
		  echo "CONFIG_FEATURE_BLKID_TYPE=y" >>.config


                  echo "    -- set CONFIG_FEATURE_VOLUMEID_SQUASHFS=y to config "
                  sed '/CONFIG_FEATURE_VOLUMEID_SQUASHFS/d' -i .config
		  echo "CONFIG_FEATURE_VOLUMEID_SQUASHFS=y" >>.config


 	     ###################################
       
   echo "// compiling busybox "        

         $TERMINAL_TOOLS  make
  	
   echo "// installing busybox " 
  	$TERMINAL_TOOLS  make CONFIG_PREFIX=$TGT_TMP_INITRD  install 
        cp -v examples/depmod.pl $TGT_TMP_INITRD/bin  >/dev/null 2>/dev/null
        chmod -v 755 $TGT_TMP_INITRD/bin/depmod.pl  >/dev/null 2>/dev/null




os_prober # look at script/grub-osprober


cd $PWDN






echo "// copying the init script "
cd $PWDN
 

cp -vpR lib $TGT_TMP_INITRD >/dev/null 2>/dev/null
cp init $TGT_TMP_INITRD >/dev/null 2>/dev/null
  




}
init_created(){

# add if command 

if [ "$KERNEL_MODULE_BUILDIN" == "y" ]; then


	kernel_module


fi 
if [ -e "/bin/cp" ]; then
	 cp -v /bin/cp $TGT_TMP_INITRD/bin/cp-gnu >/dev/null 2>/dev/null
elif [ -e "s/bin/cp" ]; then
         cp -v /sbin/cp $TGT_TMP_INITRD/bin/cp-gnu >/dev/null 2>/dev/null
else 

	echo "cp File does not exist"  >/dev/null 2>/dev/null

fi 




cd $TGT_TMP


 cp $PWDN/pkg/lfs-tools $TGT_TMP_INITRD/pkg >/dev/null 2>/dev/null


chmod -v  755 $TGT_TMP_INITRD/lib/bootsplash    >/dev/null 2>/dev/null
chmod -v  755 $TGT_TMP_INITRD/lib/debuginit  >/dev/null 2>/dev/null 
chmod -v  755 $TGT_TMP_INITRD/lib/persistandmode   >/dev/null 2>/dev/null 
chmod -v  755 $TGT_TMP_INITRD/lib/syteminitswitch >/dev/null 2>/dev/null
chmod -v  755 $TGT_TMP_INITRD/lib/cleanup    >/dev/null 2>/dev/null   
chmod -v  755 $TGT_TMP_INITRD/lib/insinit  >/dev/null 2>/dev/null    
chmod -v  755 $TGT_TMP_INITRD/lib/livekitlib   >/dev/null 2>/dev/null        
chmod -v  755 $TGT_TMP_INITRD/lib/run >/dev/null 2>/dev/null
chmod -v  755 $TGT_TMP_INITRD/init  >/dev/null 2>/dev/null 

if [ "$INSTALLER_ENABLED" == "y" ]; then
    
            echo "// installing installer and tools "
 	    cp $PWDN/installer/installer $TGT_TMP_INITRD/bin >/dev/null 2>/dev/null
            chmod -v  755 $TGT_TMP_INITRD/bin  >/dev/null 2>/dev/null
            
fi

cd $TGT_TMP

echo "// creating inirrd.img-$(uname -r)-build to /boot dir "
pushd newinit   >/dev/null 2>/dev/null
find . | cpio -o -H newc -F ../initrd   >/dev/null 2>/dev/null
popd  >/dev/null 2>/dev/null
gzip -9 initrd  >/dev/null 2>/dev/null
mv -vf initrd.gz $INITRD_FILE >/dev/null 2>/dev/null

echo "// removing temp dir "
#rm -rf $TGT_TMP_INITRD >/dev/null 2>/dev/nul
echo "// -- DONE --"

}


###################################
########## end of initrd ########## 
###################################

print_help() {
        echo -e $white
        
       
        echo " 01      110101   01011         10  00  00  101100    "
        echo " 10      01      11             01 10   01    01    "
        echo " 00      010000   10101   010   0101    10    10 "
        echo " 11      00           01        10 00   00    11 "
        echo " 011101  10       01001         11  10  10    01 "
        echo""
        echo "remastering tools for lfs based os"
        echo "created by purnomo hadi fb:purnomo.shinigami purnomo.shinigami@gmail.com ,"
        echo "under GPLv2 or later license this tools only build for remastering "
        echo "LFS based OS with AUFS and squashfs tools , initramfs based on linux live kit"
        echo ""
        echo -e $white"usage: `basename $COMMAND` [options]"
	echo "options"
        echo ""
	echo " --remastering        remastering running LFS based distro and build iniramfs"
	echo ""
        echo " --build-initrd       build initramfs" 
	echo " --config             edit .config file in $PWDN/lib "
	echo ""
        echo " -h,   --help      Show the help"
	echo " -v,   --version   Show the version"
}


parse_options() {
	if [ $# -lt 1 ]; then
		print_help
	else
		while [ "$1" ]; do
			case "${1}" in
				--build-initrd)
					SETUP_INITRD="yes"
                                        ;;
				--remastering)
					SETUP_REMASTERING="yes"
                                        ;;
				--grabing-sources)
					SETUP_SOURCES="yes"
					;;
				--config)
					SETUP_CONFIG="yes"
					;;
				--prepare)
					SETUP_PREPARE="yes"
					;;
				-v|--version)
					echo "`basename ${COMMAND}` $VERSION"
					exit 0
					;;
				--cal)
					echo ""
					;;
				-h|--help)
					print_help
					exit 0
					;;
				*)
					echo "`basename ${COMMAND}`: invalid option $1"
					exit 1
					;;
			esac
			shift
		done
	fi
}

parse_options_() {
	
		while [ "$1" ]; do
			case "${1}" in
                                --build-initrd)
					SETUP_INITRD="yes"
                                        ;;
				--remastering)
					SETUP_REMASTERING="yes"
                                        ;;
				--config)
					SETUP_CONFIG="yes"
					;;
				
			esac
			shift
		done
	
}

main () {
	parse_options "$@"
	ALL_LIST=$@

	
        if [ "$SETUP_INITRD" == "yes" ]; then
		 if [ "$ALL_LIST" == "--build-initrd" ]; then
			ceck_depend
			check_sumary
                     	build_initrd
                 else 
                        echo -e $red ""
                        echo "Option Error"
                        echo "you can't parse --build-initrd  with another Option"
                        print_help
                 fi
        elif [ "$SETUP_REMASTERING" == "yes" ]; then
		 if [ "$ALL_LIST" == "--remastering" ]; then
 			ceck_depend
			check_sumary
			if [ "$AUFS_MODULE" == "no" ]; then
				echo ""
				echo "//   please build kernel with aufs support"
                		exit
 
        		fi 
			 
                          build_initrd
                          build_live
                 else 
                        echo -e $red ""
                        echo "Option Error"
                        echo "you can't parse --remastering  with another Option"
                        print_help
                 fi
                                  
        elif [ "$SETUP_CONFIG" == "yes" ]; then
		 if [ "$ALL_LIST" == "--config" ]; then
			cd menu 
			make clean
			make -C .
			cd ../lib
			../menu/mconf Config.in .config

                 else 
                        echo -e $red ""
                        echo "Option Error"
                        echo "you can't parse --remastering  with another Option"
                        print_help
                 fi               
      

       

  	 
	fi
}


check_sumary(){
 if [ "$ISOBURN" == "no" ]; then
 	err_depend
 elif [ "$SQUASHFS" == "no" ]; then
 	err_depend
 elif [ "$SUDOAPP" == "no" ]; then
 	err_depend
 elif [ "$WGETAPP" == "no" ]; then
 	err_depend
 elif [ "$GITAPP" == "no" ]; then
 	err_depend
 else 
     summary_

     echo "// all dependencies are meet - running tools "
  
     sleep 1
  #   

    read -rsp $'Press any key to continue...\n' -n1 key

#clear
fi
}
#####################################
########## end of function ##########
#####################################

#################################################################
####################### main line program #######################
#################################################################



parse_options_ "$@"

if [ -f "lib/.config" ];
then
	. lib/.config

else
	echo "//  .config not found , creating it " 
        cd menu 
	make clean
	make -C .
	cd ../lib
	../menu/mconf Config.in .config
	exit
fi





 main "$@"








