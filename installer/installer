#!/bin/sh


. /lib/.config
#cd /$LIVEKITNAME/union
. /lib/msg 
. /lib/livekitlib



#
# installation-help for $LIVEKITNAME
# 22.05.2007
#
# shell script for installation of $LIVEKITNAME to harddisk
#
# written by Thomas Schoenhuetl <pilleus.pulcher@arcor.de> 22.05.2007
# modfification by purnomo hadi and edo Maland
# It contains parts of the official Slackware installer.
#
# This shell script is contributed under the terms of GPL v2 by Thomas Schoenhuetl <pilleus.pulcher@arcor.de> 22.05.2007.
#
#Installer $LIVEKITNAME Linux  Gnu/Linux version 2.0


MEMORY=/memory
CHANGES=$MEMORY/changes
UNION=$MEMORY/union
DATAMNT=$MEMORY/data
BUNDLES=$MEMORY/bundles
TTF=$(cat /totalline)
TTFN=$TTF
INTT="1"
ECH="#"

printf_new() {
 #str=$1
 num=$1
 v=$(printf "%-${num}s" "#")
 echo -ne "${v// /#}"
}



TMP=/tmp/tmp
if [ ! -d $TMP ]; then
  mkdir -p $TMP
fi
REDIR=/dev/tty4
NDIR=/dev/null
crunch() {
 read STRING;
 echo $STRING;
}

#####################################################
# SOME COLOURS BIAR COOL
#####################################################
cyan='\e[0;36m'
green='\e[0;34m'
okegreen='\033[92m'
lightgreen='\e[1;32m'
white='\e[1;37m'
red='\e[1;31m'
yellow='\e[1;33m'
BlueF='\e[1;34m'

CYAN='\033[1;36m'
WHITE='\033[1;37m'
YELLOW='\033[1;33m'
NC='\033[0m'
RED='\033[1;31m'


####################################################
#
####################################################




install_b(){
	cd $MEMORY/union
        echo_green_star
        echo -ne "copying some binary from system   >" | tr -s "/" >&2
	for file in $(cat /data-manifest)
 	do 
          
 
     		INTT=$(echo "($INTT+1) " | bc) 
		INTTS=$(echo "($INTT*100) " | bc   ) 
		PERSEN=$(echo "($INTTS/$TTF) " | bc ) 
 		PERSENN=$(echo "($PERSEN/2) " | bc   )
		TTFN=$(echo "($TTFN-1)" | bc )
                clear
                if [ "$PERSEN" == "100" ]; then
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
 			echo -e "${WHITE}  installing $PERSEN %"
 			echo -e "  ${RED}=================================================="
 			echo -e " ${WHITE} $(printf_new   $PERSENN)   " 
 			echo -e "  ${RED}================================================== "
 			echo ""
 			echo -e "${WHITE}  installation complete ${NC}"
 			echo -e "${WHITE}  Please wait ... ${NC}"
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
                        sleep 5


		else
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
 			echo -e "${WHITE}  installing $PERSEN %  -  $TTFN file again"
 			echo -e "  ${RED}=================================================="
 			echo -e " ${WHITE} $(printf_new   $PERSENN)   " 
 			echo -e "  ${RED}================================================== "
			echo -e ""
 			echo -e "${WHITE}  $file ${NC}"
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
			echo -e ""
 			echo -e ""
		fi
 		
 		if [ -f $file ]; then
	              
			cp-gnu --preserve --parent $file /mnt/`cat $TMP/pout | cut -b 6-9`/ &>/dev/null

	   
		else
  			echo "File $file does not exist."
 		fi
             
                   
  	done
	

}

#cp  --preserve -R  /{bin,boot,etc,home,lib,root,sbin,srv,usr,var,opt,lib64} /mnt/`cat $TMP/pout | cut -b 6-9`/ 2>/dev/null
#rsync -pavr /mnt/live/memory/bundles/root.sfs/*  /mnt/`cat $TMP/pout | cut -b 6-9`/ 2>/dev/null

####################################################
####################################################
#rm /data-manifest 2>/dev/null
clear

mkdir $MEMORY/union/dev
mkdir $MEMORY/union/proc
mkdir $MEMORY/union/sys
mkdir $MEMORY/union/run
mkdir $MEMORY/union/tmp
clear

mount -v --bind /dev $MEMORY/union/dev


mount -vt devpts devpts $MEMORY/union/proc/dev/pts -o gid=5,mode=620
mount -vt proc proc $MEMORY/union/proc
mount -vt sysfs sysfs $MEMORY/union/sys
mount -vt tmpfs tmpfs $MEMORY/union/run

clear 

echo "//   checking installation of dialog"

if [ -e "$UNION/usr/bin/dialog" ]; then
  echo "//   dialog found, skipping"
else
        
       echo "//   dialog not found "
        echo "//   installing from pre-installed" 
	cp-gnu -pR /pkg/dialog/* /$MEMORY/union 2>/dev/null
fi 
sleep 3

dialog --clear  --backtitle "$BACK_TITLE "  --title " -- ABOUT -- " --colors --msgbox "$CUSTOM_MSG " 23 75
mkdir /tmp/$LIVEKITNAME/ 2>/dev/null

dialog --clear --backtitle "$BACK_TITLE "  --title "-- GENERAL INFORMATION --" --colors --yesno "$CUSTOM_MSG2" 20 110
if [ $? = 1 ] ; then
exit
fi


dialog --clear --backtitle "$BACK_TITLE  "  --title "-- ROOT password --" --colors --yesno "\n Do you want to change root password   " 10 40
if [ $? = 0 ] ; then
clear
chroot  /$MEMORY/union /bin/passwd root 
fi

cp /pkg/lfs-tools /$MEMORY/union/usr/bin/lfs-tools 2>/dev/null

dialog --clear --backtitle "$BACK_TITLE  "  --title "-- TWEAKS --" --colors --yesno "\n running tools like time zone, keyboard, etc.   " 10 40
if [ $? = 0 ] ; then
	clear
	chmod 755  /$MEMORY/union/usr/bin/lfs-tools 2>/dev/null
	chroot  /$MEMORY/union   /usr/bin/lfs-tools --all
fi




# umount harddisk for running cfdisk
umount /mnt/* 2>/dev/null

# run cfdisk to partition the harddrive
dialog --clear --backtitle "$BACK_TITLE "  --title "-- PARTITION THE HARDDISK --" --colors --yesno "$MSG_CFDISK" 20 110
if [ $? = 1 ] ; then
exit
fi

# Create partitions using fdisk or cfdisk.
echo expert-mode >> /etc/expert-mode
mkdir /tmp/tmp 2>/dev/null
TMP=/tmp/tmp 2>/dev/null

#fdisk -l | sed -n 's/^Disk \(\/dev\/[^:]*\): \([^,]*\).*$/"\1" "\2" \\/p' >> $TMP/drivelist
fdisk -l | sed -n 's/^Disk \(\/dev\/[^:]*\): \([^,]*\).*$/"\1" "\2" \\/p' | grep  -e sd >> $TMP/drivelist
fdisk -l | sed -n 's/^Disk \(\/dev\/[^:]*\): \([^,]*\).*$/"\1" "\2" \\/p' | grep  -e hd >> $TMP/drivelist
while [ 0 ]; do
  echo dialog --ok-label Select \
    --cancel-label Continue \
    --title \"PARTITIONING\" \
    --menu \"Select drive to partition:\" 11 40 4 \\\
    > $TMP/tmpscript
  cat $TMP/drivelist >> $TMP/tmpscript
  echo "2> $TMP/tmpanswer" >> $TMP/tmpscript
  . $TMP/tmpscript
  [ $? != 0 ] && break
  PARTITION=`cat $TMP/tmpanswer`

  if [ ! -f /etc/expert-mode ]; then
    cfdisk $PARTITION
  else
    echo dialog --title \"PARTITIONING $PARTITION\" \
      --menu \"Select which fdisk program you want to use. cfdisk is \
      strongly recommended for newbies while advanced users may prefer fdisk.\" \
      15 60 3 \
      cfdisk \"Curses based partitioning program\" \
      fdisk \"Traditional fdisk\" \
      "2> $TMP/tmpanswer" > $TMP/tmpscript
    . $TMP/tmpscript
    [ $? != 0 ] && continue
    FDISKPROGRAM=`cat $TMP/tmpanswer`
    clear
    if [ "$FDISKPROGRAM" = "cfdisk" ]; then
      cfdisk $PARTITION
    elif [ "$FDISKPROGRAM" = "fdisk" ]; then
      fdisk $PARTITION
    fi
  fi
done
rm -f $TMP/drivelist $TMP/tmpscript $TMP/tmpanswer




##################
#  SWAP removed  #
#  error lbgmp   #
##################

# format root partition
fdisk -l | grep Linux | sed -e '/swap/d' | cut -b 1-9 > $TMP/pout 2>/dev/null
partprobe `cat $TMP/pout |  cut -b 1-8` 


dialog --clear --backtitle "$BACK_TITLE "  --title " -- ROOT PARTITION DETECTED -- " --exit-label OK  --colors --msgbox "\n\n  $LIVEKITNAME  installer has detected \n\n $(lsblk -fpl | grep -e "ext*" | awk '{print $1}') \n\nas your   linux partition(s).\n\n In the next box you can choose the linux filesystem for your root partition or choose the partition if you have more than one linux partitions!" 20 80
if [ $? = 1 ] ; then
exit
fi

# choose root partition
dialog --clear --backtitle "$BACK_TITLE "  --title " -- CHOOSE ROOT PARTITION -- " --colors --inputbox "\n\n Please give me your preferred   root partition  in this way:\n\n Write /dev/hdax \n  Example :  2 for   /dev/hda2 \n\nNOTE : \n x :  Number of the partition\n\n\n " 20 80 2> $TMP/pout

dialog --clear --backtitle "$BACK_TITLE "  --title " -- FORMAT ROOT PARTITION -- " --radiolist "Now you can choose the filesystem for your root partition.\n\n ReiserFS is the recommended filesystem. to /mnt/`cat $TMP/pout | cut -b 6-9`/" 10 70 0 \
"1" "ext2" off \
"2" "ext3" off \
"3" "ext4" on \
"4" "reiserfs" of \
2> $TMP/part
if [ $? = 1 ] ; then
exit
fi

if [ `cat $TMP/part` = "1" ] ; then
mkfs.ext2 `cat $TMP/pout`
dialog --clear --backtitle "$BACK_TITLE "  --title " -- FORMAT ROOT PARTITION -- " --colors --msgbox "\n\n Now your partition has been formatted with   ext2 filesystem." 10 70
echo "`cat $TMP/pout` / ext2 defaults,noatime 1 1" >> $TMP/SeTfstab2
# mount the root partition to copy the system
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`
mount -t ext2 /dev/`cat $TMP/pout | cut -b 6-9` /mnt/`cat $TMP/pout | cut -b 6-9`
fi

if [ `cat $TMP/part` = "2" ] ; then
mkfs.ext3 `cat $TMP/pout`
dialog --clear --backtitle "$BACK_TITLE "  --title " -- FORMAT ROOT PARTITION -- " --colors --msgbox "\n\n Now your partition has been formatted with   ext3 filesystem." 10 70
echo "`cat $TMP/pout` / ext3 defaults,noatime 1 1" >> $TMP/SeTfstab2
# mount the root partition to copy the system
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`
mount -t ext3 /dev/`cat $TMP/pout | cut -b 6-9` /mnt/`cat $TMP/pout | cut -b 6-9`
fi

if [ `cat $TMP/part` = "3" ] ; then
mkfs.ext4 `cat $TMP/pout`
dialog --clear --backtitle "$BACK_TITLE "  --title " -- FORMAT ROOT PARTITION -- " --colors --msgbox "\n\n Now your partition has been formatted with   ext4 filesystem." 10 70
echo "`cat $TMP/pout` / ext4 defaults,noatime 1 1" >> $TMP/SeTfstab2
# mount the root partition to copy the system
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`
mount -t ext4 /dev/`cat $TMP/pout | cut -b 6-9` /mnt/`cat $TMP/pout | cut -b 6-9`
fi

if [ `cat $TMP/part` = "4" ] ; then
mkfs.reiserfs -f `cat $TMP/pout`
dialog --clear --backtitle "$BACK_TITLE "  --title " -- FORMAT ROOT PARTITION -- " --colors --msgbox "\n\n Now your partition has been formatted with   reiserfs filesystem." 10 70
echo "`cat $TMP/pout` / reiserfs defaults,noatime 1 1" >> $TMP/SeTfstab2
# mount the root partition to copy the system
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`
mount -t reiserfs /dev/`cat $TMP/pout | cut -b 6-9` /mnt/`cat $TMP/pout | cut -b 6-9`
fi

# copy the system
dialog --clear --backtitle "$BACK_TITLE "  --title " -- COPYING THE SYSTEM -- " --colors --msgbox "\n\n $LIVEKITNAME Installer will now copy the running system to   your harddisk.\n\n Press OK to start ..." 10 70
if [ $? = 1 ] ; then
exit
fi



##########################
## installation prosses ##
##########################

install_b
clear
echo "//   check os-prober is already installed"
cp-gnu -pR /custom/* /mnt/`cat $TMP/pout | cut -b 6-9`/ &>/dev/null

if [ -f "$UNION/usr/bin/os-prober" ]; then
	 echo "//   Os-prober not found . installing"
           
	cp-gnu -pR /os-prober/* /mnt/`cat $TMP/pout | cut -b 6-9`/ &>/dev/null
else 
        echo "//   Os-prober found . skipping"
fi

sleep 3







cd $UNION
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`/dev 2>/dev/null
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`/dev/pts 2>/dev/null
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`/mnt 2>/dev/null
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`/proc 2>/dev/null
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`/sys 2>/dev/null
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`/tmp 2>/dev/null
mkdir /mnt/`cat $TMP/pout | cut -b 6-9`/run 2>/dev/null


#cp /mnt/live/mnt/*/boot/vmlinuz /mnt/`cat $TMP/pout | cut -b 6-9`/boot/ 2>/dev/null

dialog --clear --backtitle "$BACK_TITLE "  --title " -- TRANSACTION FINISHED -- " --colors --msgbox "\n\n Now $LIVEKITNAME Installer has finished the transaction." 10 70
if [ $? = 1 ] ; then
exit
fi

# create new fstab
echo `cat $TMP/SeTfstab` > /mnt/`cat $TMP/pout | cut -b 6-9`/etc/fstab 2>/dev/null
echo `cat $TMP/SeTfstab2` >> /mnt/`cat $TMP/pout | cut -b 6-9`/etc/fstab 2>/dev/null

echo "proc /proc proc nosuid,noexec,nodev 0 0" >> /mnt/`cat $TMP/pout | cut -b 6-9`/etc/fstab 2>/dev/null
echo "sysfs /sys sysfs nosuid,noexec,nodev 0 0" >> /mnt/`cat $TMP/pout | cut -b 6-9`/etc/fstab 2>/dev/null
echo "devpts /dev/pts devpts gid=5,mode=620 0 0" >> /mnt/`cat $TMP/pout | cut -b 6-9`/etc/fstab 2>/dev/null
echo "tmpfs /run tmpfs defaults 0 0" >> /mnt/`cat $TMP/pout | cut -b 6-9`/etc/fstab 2>/dev/null
echo "devtmpfs /dev devtmpfs mode=0755,nosuid 0 0" >> /mnt/`cat $TMP/pout | cut -b 6-9`/etc/fstab 2>/dev/null



# prepare installation of grub
mount --bind /dev /mnt/`cat $TMP/pout | cut -b 6-9`/dev
mount -t proc /proc /mnt/`cat $TMP/pout | cut -b 6-9`/proc

mount -vt devpts -o gid=5,mode=620 devpts /mnt/`cat $TMP/pout | cut -b 6-9`/dev/pts
mount -vt tmpfs tmpfs /mnt/`cat $TMP/pout | cut -b 6-9`/run
mount -vt sysfs sysfs /mnt/`cat $TMP/pout | cut -b 6-9`/sys
#cp-gnu --preserve -R /etc/grub.d.deb/* /mnt/`cat $TMP/pout | cut -b 6-9`/etc/grub.d/ 2>/dev/null
#cp -f /.bashrc  /mnt/`cat $TMP/pout | cut -b 6-9`/root/.bashrc

dialog --clear --backtitle "$BACK_TITLE "  --title " -- Installing GRUB Boot loader -- " --colors --radiolist "\n\n Now you can choose   install grub  or if you have   grub before  and use it please select   no .to /mnt/`cat $TMP/pout | cut -b 6-9`/" 10 70 0 \
"1" "yes" on \
"2" "no" off \
2> $TMP/part2
if [ $? = 1 ] ; then
exit
fi

  if [ `cat $TMP/part2` = "1" ] ; then

    dialog --backtitle "$BACK_TITLE "  --title " -- Installing GRUB Boot loader -- " --colors --msgbox "\n\n   Grub-install `cat $TMP/pout |  cut -b 1-8` --force --boot-directory=/mnt/`cat $TMP/pout |  cut -b 6-9`/boot" 10 75
   
   chroot  $UNION/sbin/grub-install `cat $TMP/pout |  cut -b 1-8` --force --boot-directory=/mnt/`cat $TMP/pout |  cut -b 6-9`/boot

     ################################################
     # remove uneeded grub my be make stuck on boot #
     ################################################
     rm -vf /mnt/`cat $TMP/pout |  cut -b 6-9`/etc/grub.d/*xen
   #  rm -vf /etc/grub.d/*xen

    chroot /mnt/`cat $TMP/pout |  cut -b 6-9` /sbin/grub-mkconfig -o /boot/grub/grub.cfg
   # chroot /mnt/`cat $TMP/pout |  cut -b 6-9` /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg

  fi
  if [ `cat $TMP/part2` = "2" ] ; then

    dialog --clear --backtitle "$BACK_TITLE "  --title "-- INSTALLATION FINISHED -- " --colors --yesno "\n\n Now $LIVEKITNAME Installer has   finished the installation. Please reboot the system to boot  another distro for   generating new grub menu.\n\n Use   sudo grub-mkconfig -o /boot/grub/grub.cfg to generate grub menu " 10 90
      if [ $? = 0 ] ; then
	clear
	reboot
      fi
  fi







dialog --clear --backtitle "$BACK_TITLE "  --title "-- INSTALLATION FINISHED -- " --colors --yesno "\n\n Now $LIVEKITNAME Installer has finished the installation.\n\nPlease   reboot the system or continue testing  " 10 70
if [ $? = 0 ] ; then
clear
reboot
fi


rm -R $TMP

exit

